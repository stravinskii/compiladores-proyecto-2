Nonterminals useless in grammar

   test
   old_test
   or_test
   or_andtest
   and_test
   and_nottest
   not_test
   comparison
   comp_op_expr_kleene
   comp_op
   expr
   pipexor_expr
   xor_expr
   andxor_expr
   and_expr
   andpandshift_expr
   shift_expr
   leftright_shift_expr
   arithmetic_expr
   sign_term
   term
   factor_operation
   factor
   power
   trailer_kleene
   trailer
   arglist
   argument_comma
   argument_multiple
   comma_argument
   argument
   comp_for
   comp_iter
   comp_if
   subscriptlist
   comma_subscript
   subscript
   sliceop
   exprlist
   expr_kleene
   atom
   boolean
   testlist1
   string_plus
   listmaker
   testlist_comp
   compound_stmt
   if_stmt
   elif_test_td_suite_kleene
   while_stmt
   for_stmt
   suite
   stmt_plus
   stmt
   simple_stmt
   small_stmt_kleene
   $@1
   small_stmt
   expr_stmt
   expr_stmt_at
   assign_testlist_kleene
   augassign
   print_stmt
   print_args
   comma_test_kleene
   comma_one
   testlist
   flow_stmt
   break_stmt
   continue_stmt
   return_stmt
   funcdef
   parameters
   varargslist
   args_kleene


Terminals unused in grammar

   FLOATNUMBER
   INTEGER
   STRING
   NAME
   DEDENT
   INDENT
   MAS
   MENOS
   POR
   ENTRE
   MOD
   DIV
   POT
   FALSE
   CLASS
   FINALLY
   IS
   RETURN
   NONE
   CONTINUE
   FOR
   LAMBDA
   TRY
   TRUE
   DEF
   FROM
   WHILE
   AND
   DEL
   NOT
   WITH
   AS
   ELIF
   IF
   OR
   ELSE
   IMPORT
   PASS
   BREAK
   EXCEPT
   IN
   PRINT
   COMMA
   DOT
   ASSIGN
   TWODOTS
   DOTCOMMA
   BINLEFT
   BINRIGHT
   ANDPAND
   PIPE
   EXP
   TILDE
   LESSTHAN
   MORETHAN
   LESSEQUAL
   MOREEQUAL
   EQUALS
   DIFFERENT
   PICOPARENTESIS
   OPENPAR
   CLOSEPAR
   OPENCOR
   CLOSECOR
   OPENKEY
   CLOSEKEY
   AT
   RIGHT
   MASIGUAL
   MENOSIGUAL
   PORIGUAL
   ENTREIGUAL
   DIVIGUAL
   MODIGUAL
   ANDIGUAL
   ORIGUAL
   EXPIGUAL
   BINRIGHTIGUAL
   BINLEFTIGUAL
   POTIGUAL
   GLOBAL
   APOSTROFE


Rules useless in grammar

    5 filein: filein stmt

    6 test: or_test
    7     | or_test IF or_test ELSE test

    8 old_test: or_test

    9 or_test: and_test or_andtest

   10 or_andtest: epsilon
   11           | or_andtest OR and_test

   12 and_test: not_test and_nottest

   13 and_nottest: epsilon
   14            | and_nottest AND not_test

   15 not_test: NOT not_test
   16         | comparison

   17 comparison: expr comp_op_expr_kleene

   18 comp_op_expr_kleene: epsilon
   19                    | comp_op_expr_kleene comp_op expr

   20 comp_op: LESSTHAN
   21        | MORETHAN
   22        | EQUALS
   23        | MOREEQUAL
   24        | LESSEQUAL
   25        | DIFFERENT
   26        | PICOPARENTESIS
   27        | IN
   28        | NOT IN
   29        | IS
   30        | IS NOT

   31 expr: xor_expr pipexor_expr

   32 pipexor_expr: epsilon
   33             | pipexor_expr PIPE xor_expr

   34 xor_expr: and_expr andxor_expr

   35 andxor_expr: epsilon
   36            | andxor_expr EXP and_expr

   37 and_expr: shift_expr andpandshift_expr

   38 andpandshift_expr: epsilon
   39                  | andpandshift_expr ANDPAND shift_expr

   40 shift_expr: arithmetic_expr leftright_shift_expr

   41 leftright_shift_expr: epsilon
   42                     | leftright_shift_expr BINRIGHT arithmetic_expr
   43                     | leftright_shift_expr BINLEFT arithmetic_expr

   44 arithmetic_expr: term sign_term

   45 sign_term: epsilon
   46          | sign_term MAS term
   47          | sign_term MENOS term

   48 term: factor factor_operation

   49 factor_operation: epsilon
   50                 | factor_operation POR factor
   51                 | factor_operation ENTRE factor
   52                 | factor_operation MOD factor
   53                 | factor_operation DIV factor

   54 factor: MAS factor
   55       | MENOS factor
   56       | TILDE factor
   57       | power

   58 power: atom trailer_kleene
   59      | atom trailer_kleene POT factor

   60 trailer_kleene: epsilon
   61               | trailer_kleene trailer

   62 trailer: OPENPAR CLOSEPAR
   63        | OPENPAR arglist CLOSEPAR
   64        | OPENCOR subscriptlist CLOSECOR
   65        | DOT NAME

   66 arglist: argument_comma argument_multiple

   67 argument_comma: epsilon
   68               | argument_comma argument COMMA

   69 argument_multiple: argument
   70                  | argument COMMA
   71                  | POR test comma_argument
   72                  | POR test comma_argument COMMA POT test
   73                  | POT test

   74 comma_argument: epsilon
   75               | comma_argument COMMA argument

   76 argument: test
   77         | test comp_for
   78         | test ASSIGN test

   79 comp_for: FOR exprlist IN or_test comp_iter
   80         | FOR exprlist IN or_test

   81 comp_iter: comp_for
   82          | comp_if

   83 comp_if: IF old_test
   84        | IF old_test comp_iter

   85 subscriptlist: subscript comma_subscript
   86              | subscript comma_subscript COMMA

   87 comma_subscript: epsilon
   88                | comma_subscript COMMA subscript

   89 subscript: DOT DOT DOT
   90          | test
   91          | test TWODOTS test sliceop
   92          | test TWODOTS test
   93          | test TWODOTS
   94          | test TWODOTS sliceop
   95          | TWODOTS test sliceop
   96          | TWODOTS test
   97          | TWODOTS sliceop
   98          | TWODOTS

   99 sliceop: TWODOTS
  100        | TWODOTS test

  101 exprlist: expr expr_kleene
  102         | expr expr_kleene COMMA

  103 expr_kleene: epsilon
  104            | expr_kleene COMMA expr

  105 atom: OPENPAR CLOSEPAR
  106     | OPENPAR testlist_comp CLOSEPAR
  107     | OPENCOR CLOSECOR
  108     | OPENCOR listmaker CLOSECOR
  109     | APOSTROFE testlist1 APOSTROFE
  110     | string_plus
  111     | boolean
  112     | NONE
  113     | NAME
  114     | FLOATNUMBER
  115     | INTEGER

  116 boolean: TRUE
  117        | FALSE

  118 testlist1: test comma_test_kleene

  119 string_plus: STRING
  120            | STRING string_plus

  121 listmaker: test comma_test_kleene

  122 testlist_comp: test comp_for
  123              | test comma_test_kleene comma_one

  124 compound_stmt: if_stmt
  125              | while_stmt
  126              | for_stmt
  127              | funcdef

  128 if_stmt: IF test TWODOTS suite elif_test_td_suite_kleene
  129        | IF test TWODOTS suite elif_test_td_suite_kleene ELSE TWODOTS suite

  130 elif_test_td_suite_kleene: epsilon
  131                          | elif_test_td_suite_kleene ELIF test TWODOTS suite

  132 while_stmt: WHILE test TWODOTS suite
  133           | WHILE test TWODOTS suite ELSE TWODOTS suite

  134 for_stmt: FOR exprlist IN testlist TWODOTS suite
  135         | FOR exprlist IN testlist TWODOTS suite ELSE TWODOTS suite

  136 suite: simple_stmt
  137      | NEWLINE INDENT stmt_plus DEDENT

  138 stmt_plus: stmt_plus stmt
  139          | stmt

  140 stmt: simple_stmt
  141     | compound_stmt

  142 simple_stmt: small_stmt small_stmt_kleene DOTCOMMA NEWLINE
  143            | small_stmt small_stmt_kleene NEWLINE

  144 $@1: /* empty */

  145 small_stmt_kleene: epsilon $@1 small_stmt_kleene DOTCOMMA small_stmt

  146 small_stmt: expr_stmt
  147           | print_stmt
  148           | flow_stmt

  149 expr_stmt: testlist expr_stmt_at

  150 expr_stmt_at: augassign testlist
  151             | assign_testlist_kleene

  152 assign_testlist_kleene: epsilon
  153                       | assign_testlist_kleene ASSIGN testlist

  154 augassign: MASIGUAL
  155          | MENOSIGUAL
  156          | PORIGUAL
  157          | ENTREIGUAL

  158 print_stmt: PRINT print_args

  159 print_args: epsilon
  160           | test comma_test_kleene

  161 comma_test_kleene: epsilon
  162                  | comma_test_kleene COMMA test

  163 comma_one: epsilon
  164          | COMMA

  165 testlist: test comma_test_kleene comma_one

  166 flow_stmt: break_stmt
  167          | continue_stmt
  168          | return_stmt

  169 break_stmt: BREAK

  170 continue_stmt: CONTINUE

  171 return_stmt: RETURN
  172            | RETURN testlist

  173 funcdef: DEF NAME parameters TWODOTS suite

  174 parameters: OPENPAR CLOSEPAR
  175           | OPENPAR varargslist CLOSEPAR

  176 varargslist: NAME args_kleene

  177 args_kleene: args_kleene COMMA NAME
  178            | epsilon


Grammar

    0 $accept: file_input $end

    1 file_input: filein

    2 filein: epsilon
    3       | filein NEWLINE

    4 epsilon: /* empty */


Terminals, with rules where they appear

$end (0) 0
error (256)
FLOATNUMBER (258)
INTEGER (259)
STRING (260)
NAME (261)
DEDENT (262)
INDENT (263)
NEWLINE (264) 3
MAS (265)
MENOS (266)
POR (267)
ENTRE (268)
MOD (269)
DIV (270)
POT (271)
FALSE (272)
CLASS (273)
FINALLY (274)
IS (275)
RETURN (276)
NONE (277)
CONTINUE (278)
FOR (279)
LAMBDA (280)
TRY (281)
TRUE (282)
DEF (283)
FROM (284)
WHILE (285)
AND (286)
DEL (287)
NOT (288)
WITH (289)
AS (290)
ELIF (291)
IF (292)
OR (293)
ELSE (294)
IMPORT (295)
PASS (296)
BREAK (297)
EXCEPT (298)
IN (299)
PRINT (300)
COMMA (301)
DOT (302)
ASSIGN (303)
TWODOTS (304)
DOTCOMMA (305)
BINLEFT (306)
BINRIGHT (307)
ANDPAND (308)
PIPE (309)
EXP (310)
TILDE (311)
LESSTHAN (312)
MORETHAN (313)
LESSEQUAL (314)
MOREEQUAL (315)
EQUALS (316)
DIFFERENT (317)
PICOPARENTESIS (318)
OPENPAR (319)
CLOSEPAR (320)
OPENCOR (321)
CLOSECOR (322)
OPENKEY (323)
CLOSEKEY (324)
AT (325)
RIGHT (326)
MASIGUAL (327)
MENOSIGUAL (328)
PORIGUAL (329)
ENTREIGUAL (330)
DIVIGUAL (331)
MODIGUAL (332)
ANDIGUAL (333)
ORIGUAL (334)
EXPIGUAL (335)
BINRIGHTIGUAL (336)
BINLEFTIGUAL (337)
POTIGUAL (338)
GLOBAL (339)
APOSTROFE (340)


Nonterminals, with rules where they appear

$accept (86)
    on left: 0
file_input (87)
    on left: 1, on right: 0
filein (88)
    on left: 2 3, on right: 1 3
epsilon (89)
    on left: 4, on right: 2


state 0

    0 $accept: . file_input $end

    $default  reduce using rule 4 (epsilon)

    file_input  go to state 1
    filein      go to state 2
    epsilon     go to state 3


state 1

    0 $accept: file_input . $end

    $end  shift, and go to state 4


state 2

    1 file_input: filein .
    3 filein: filein . NEWLINE

    NEWLINE  shift, and go to state 5

    $default  reduce using rule 1 (file_input)


state 3

    2 filein: epsilon .

    $default  reduce using rule 2 (filein)


state 4

    0 $accept: file_input $end .

    $default  accept


state 5

    3 filein: filein NEWLINE .

    $default  reduce using rule 3 (filein)
